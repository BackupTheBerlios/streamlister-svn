#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.59)
AC_INIT([streamlister], [0.2], [crass@users.berlios.de])
AC_CONFIG_SRCDIR([playlist.cxx])
# AC_CONFIG_HEADER([config.h])
AM_INIT_AUTOMAKE([no-define dist-bzip2])

# Enable arguments
dnl AC_ARG_ENABLE([zlib], [  --enable-zlib           include support for compressed streams using zlib (default=enable)], , enable_zlib=yes)
AC_ARG_WITH([zlib],
	    AC_HELP_STRING([--with-zlib],
            [include support for compressed streams using zlib [[enabled]]]), ,
	    enable_zlib=yes)
AC_ARG_ENABLE([debug], AC_HELP_STRING([--enable-debug], [give debugging output level 0 - 9 (default 0 (no debugging))]), AC_DEFINE_UNQUOTED(DEBUG_LEVEL, [$enableval]), [])

# Checks for programs.
AC_PROG_CXX
AC_PROG_CC

# Checks for libraries.
dnl AC_CHECK_LIB([], [])

# Checks for header files.
AC_CHECK_HEADERS([unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_TYPE_PID_T
AC_TYPE_SIZE_T

# Checks for library functions.
AC_FUNC_STAT

# Checks for required packages.
PKG_CHECK_MODULES([GTKMM], [gtkmm-2.4 atkmm-1.6 gdkmm-2.4 pangomm-1.4 glibmm-2.4], [], [])
PKG_CHECK_MODULES([LIBXMLPP], [libxml++-2.6 >= 2.6.1], [], [])
dnl PKG_CHECK_MODULES([CURLPP], [curlpp >= 0.3.2-rc2], [], [])

if false; then
PKG_CHECK_MODULES([CURLPP], [curlpp >= 0.5.0], [
    echo checking curlpp version... libcurlpp `pkg-config --modversion curlpp`
    AC_DEFINE(HAVE_LIBCURLPP_DEV)
], [
    PKG_CHECK_MODULES([CURLPP], [curlpp >= 0.3.3], [
	echo checking curlpp version... libcurlpp `pkg-config --modversion curlpp`
    ], [
	AC_MSG_ERROR([need curlpp version 0.3.3 or 0.5.0, have $CURLPP_VERSION], [-1])
    ])
])

else

PKG_PROG_PKG_CONFIG([])
dnl Only need this till curlpp project make a pkg-config module
if $PKG_CONFIG curlpp; then
    echo -n 'checking curlpp version... '
    if $PKG_CONFIG --exists 'curlpp >= 0.5.0'; then
	echo `$PKG_CONFIG --modversion curlpp`
	PKG_CHECK_MODULES([CURLPP], [curlpp >= 0.5.0], [], [])
    dnl    AC_MSG_CHECKING(CURLPP_CFLAGS)
    dnl    CURLPP_CFLAGS=`curlpp-config --cflags`
    dnl    AC_MSG_RESULT($CURLPP_CFLAGS)
	
    dnl    AC_MSG_CHECKING(CURLPP_LIBS)
    dnl    CURLPP_LIBS=`curlpp-config --libs`
    dnl    AC_MSG_RESULT($CURLPP_LIBS)
	
	AC_DEFINE(HAVE_LIBCURLPP_DEV)
    elif $PKG_CONFIG --exists 'curlpp >= 0.3.3'; then
	echo `$PKG_CONFIG --modversion curlpp`
	PKG_CHECK_MODULES([CURLPP], [curlpp >= 0.3.3], [], [])
    else
	echo
	AC_MSG_ERROR([need curlpp version 0.3.3 or 0.5.0, have `$PKG_CONFIG --modversion curlpp`], [-1])
    fi;dnl
else
    AC_MSG_ERROR([need curlpp version 0.3.3 or 0.5.0], [-1])
fi;dnl

fi;dnl

AC_SUBST(CURLPP_CFLAGS)
AC_SUBST(CURLPP_LIBS)

# Checks for optional packages
dnl echo "enable_zlib = $enable_zlib";
if test "x$enable_zlib" == "xyes"; then
    AC_CHECK_HEADERS([zlib.h])
    AC_CHECK_LIB([z], [zlibVersion])
fi;dnl

AC_CONFIG_FILES([Makefile])
AC_OUTPUT
